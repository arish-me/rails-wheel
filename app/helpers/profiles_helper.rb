module ProfilesHelper

  COUNTRY_MAPPING = {
    AF: "ðŸ‡¦ðŸ‡« Afghanistan",
    AL: "ðŸ‡¦ðŸ‡± Albania",
    DZ: "ðŸ‡©ðŸ‡¿ Algeria",
    AD: "ðŸ‡¦ðŸ‡© Andorra",
    AO: "ðŸ‡¦ðŸ‡´ Angola",
    AG: "ðŸ‡¦ðŸ‡¬ Antigua and Barbuda",
    AR: "ðŸ‡¦ðŸ‡· Argentina",
    AM: "ðŸ‡¦ðŸ‡² Armenia",
    AU: "ðŸ‡¦ðŸ‡º Australia",
    AT: "ðŸ‡¦ðŸ‡¹ Austria",
    AZ: "ðŸ‡¦ðŸ‡¿ Azerbaijan",
    BS: "ðŸ‡§ðŸ‡¸ Bahamas",
    BH: "ðŸ‡§ðŸ‡­ Bahrain",
    BD: "ðŸ‡§ðŸ‡© Bangladesh",
    BB: "ðŸ‡§ðŸ‡§ Barbados",
    BY: "ðŸ‡§ðŸ‡¾ Belarus",
    BE: "ðŸ‡§ðŸ‡ª Belgium",
    BZ: "ðŸ‡§ðŸ‡¿ Belize",
    BJ: "ðŸ‡§ðŸ‡¯ Benin",
    BT: "ðŸ‡§ðŸ‡¹ Bhutan",
    BO: "ðŸ‡§ðŸ‡´ Bolivia",
    BA: "ðŸ‡§ðŸ‡¦ Bosnia and Herzegovina",
    BW: "ðŸ‡§ðŸ‡¼ Botswana",
    BR: "ðŸ‡§ðŸ‡· Brazil",
    BN: "ðŸ‡§ðŸ‡³ Brunei",
    BG: "ðŸ‡§ðŸ‡¬ Bulgaria",
    BF: "ðŸ‡§ðŸ‡« Burkina Faso",
    BI: "ðŸ‡§ðŸ‡® Burundi",
    KH: "ðŸ‡°ðŸ‡­ Cambodia",
    CM: "ðŸ‡¨ðŸ‡² Cameroon",
    CA: "ðŸ‡¨ðŸ‡¦ Canada",
    CV: "ðŸ‡¨ðŸ‡» Cape Verde",
    CF: "ðŸ‡¨ðŸ‡« Central African Republic",
    TD: "ðŸ‡¹ðŸ‡© Chad",
    CL: "ðŸ‡¨ðŸ‡± Chile",
    CN: "ðŸ‡¨ðŸ‡³ China",
    CO: "ðŸ‡¨ðŸ‡´ Colombia",
    KM: "ðŸ‡°ðŸ‡² Comoros",
    CG: "ðŸ‡¨ðŸ‡¬ Congo",
    CD: "ðŸ‡¨ðŸ‡© Congo, Democratic Republic of the",
    CR: "ðŸ‡¨ðŸ‡· Costa Rica",
    CI: "ðŸ‡¨ðŸ‡® CÃ´te d'Ivoire",
    HR: "ðŸ‡­ðŸ‡· Croatia",
    CU: "ðŸ‡¨ðŸ‡º Cuba",
    CY: "ðŸ‡¨ðŸ‡¾ Cyprus",
    CZ: "ðŸ‡¨ðŸ‡¿ Czech Republic",
    DK: "ðŸ‡©ðŸ‡° Denmark",
    DJ: "ðŸ‡©ðŸ‡¯ Djibouti",
    DM: "ðŸ‡©ðŸ‡² Dominica",
    DO: "ðŸ‡©ðŸ‡´ Dominican Republic",
    EC: "ðŸ‡ªðŸ‡¨ Ecuador",
    EG: "ðŸ‡ªðŸ‡¬ Egypt",
    SV: "ðŸ‡¸ðŸ‡» El Salvador",
    GQ: "ðŸ‡¬ðŸ‡¶ Equatorial Guinea",
    ER: "ðŸ‡ªðŸ‡· Eritrea",
    EE: "ðŸ‡ªðŸ‡ª Estonia",
    ET: "ðŸ‡ªðŸ‡¹ Ethiopia",
    FJ: "ðŸ‡«ðŸ‡¯ Fiji",
    FI: "ðŸ‡«ðŸ‡® Finland",
    FR: "ðŸ‡«ðŸ‡· France",
    GA: "ðŸ‡¬ðŸ‡¦ Gabon",
    GM: "ðŸ‡¬ðŸ‡² Gambia",
    GE: "ðŸ‡¬ðŸ‡ª Georgia",
    DE: "ðŸ‡©ðŸ‡ª Germany",
    GH: "ðŸ‡¬ðŸ‡­ Ghana",
    GR: "ðŸ‡¬ðŸ‡· Greece",
    GD: "ðŸ‡¬ðŸ‡© Grenada",
    GT: "ðŸ‡¬ðŸ‡¹ Guatemala",
    GN: "ðŸ‡¬ðŸ‡³ Guinea",
    GW: "ðŸ‡¬ðŸ‡¼ Guinea-Bissau",
    GY: "ðŸ‡¬ðŸ‡¾ Guyana",
    HT: "ðŸ‡­ðŸ‡¹ Haiti",
    HN: "ðŸ‡­ðŸ‡³ Honduras",
    HU: "ðŸ‡­ðŸ‡º Hungary",
    IS: "ðŸ‡®ðŸ‡¸ Iceland",
    IN: "ðŸ‡®ðŸ‡³ India",
    ID: "ðŸ‡®ðŸ‡© Indonesia",
    IR: "ðŸ‡®ðŸ‡· Iran",
    IQ: "ðŸ‡®ðŸ‡¶ Iraq",
    IE: "ðŸ‡®ðŸ‡ª Ireland",
    IL: "ðŸ‡®ðŸ‡± Israel",
    IT: "ðŸ‡®ðŸ‡¹ Italy",
    JM: "ðŸ‡¯ðŸ‡² Jamaica",
    JP: "ðŸ‡¯ðŸ‡µ Japan",
    JO: "ðŸ‡¯ðŸ‡´ Jordan",
    KZ: "ðŸ‡°ðŸ‡¿ Kazakhstan",
    KE: "ðŸ‡°ðŸ‡ª Kenya",
    KI: "ðŸ‡°ðŸ‡® Kiribati",
    KP: "ðŸ‡°ðŸ‡µ North Korea",
    KR: "ðŸ‡°ðŸ‡· South Korea",
    KW: "ðŸ‡°ðŸ‡¼ Kuwait",
    KG: "ðŸ‡°ðŸ‡¬ Kyrgyzstan",
    LA: "ðŸ‡±ðŸ‡¦ Laos",
    LV: "ðŸ‡±ðŸ‡» Latvia",
    LB: "ðŸ‡±ðŸ‡§ Lebanon",
    LS: "ðŸ‡±ðŸ‡¸ Lesotho",
    LR: "ðŸ‡±ðŸ‡· Liberia",
    LY: "ðŸ‡±ðŸ‡¾ Libya",
    LI: "ðŸ‡±ðŸ‡® Liechtenstein",
    LT: "ðŸ‡±ðŸ‡¹ Lithuania",
    LU: "ðŸ‡±ðŸ‡º Luxembourg",
    MK: "ðŸ‡²ðŸ‡° North Macedonia",
    MG: "ðŸ‡²ðŸ‡¬ Madagascar",
    MW: "ðŸ‡²ðŸ‡¼ Malawi",
    MY: "ðŸ‡²ðŸ‡¾ Malaysia",
    MV: "ðŸ‡²ðŸ‡» Maldives",
    ML: "ðŸ‡²ðŸ‡± Mali",
    MT: "ðŸ‡²ðŸ‡¹ Malta",
    MH: "ðŸ‡²ðŸ‡­ Marshall Islands",
    MR: "ðŸ‡²ðŸ‡· Mauritania",
    MU: "ðŸ‡²ðŸ‡º Mauritius",
    MX: "ðŸ‡²ðŸ‡½ Mexico",
    FM: "ðŸ‡«ðŸ‡² Micronesia",
    MD: "ðŸ‡²ðŸ‡© Moldova",
    MC: "ðŸ‡²ðŸ‡¨ Monaco",
    MN: "ðŸ‡²ðŸ‡³ Mongolia",
    ME: "ðŸ‡²ðŸ‡ª Montenegro",
    MA: "ðŸ‡²ðŸ‡¦ Morocco",
    MZ: "ðŸ‡²ðŸ‡¿ Mozambique",
    MM: "ðŸ‡²ðŸ‡² Myanmar",
    NA: "ðŸ‡³ðŸ‡¦ Namibia",
    NR: "ðŸ‡³ðŸ‡· Nauru",
    NP: "ðŸ‡³ðŸ‡µ Nepal",
    NL: "ðŸ‡³ðŸ‡± Netherlands",
    NZ: "ðŸ‡³ðŸ‡¿ New Zealand",
    NI: "ðŸ‡³ðŸ‡® Nicaragua",
    NE: "ðŸ‡³ðŸ‡ª Niger",
    NG: "ðŸ‡³ðŸ‡¬ Nigeria",
    NO: "ðŸ‡³ðŸ‡´ Norway",
    OM: "ðŸ‡´ðŸ‡² Oman",
    PK: "ðŸ‡µðŸ‡° Pakistan",
    PW: "ðŸ‡µðŸ‡¼ Palau",
    PA: "ðŸ‡µðŸ‡¦ Panama",
    PG: "ðŸ‡µðŸ‡¬ Papua New Guinea",
    PY: "ðŸ‡µðŸ‡¾ Paraguay",
    PE: "ðŸ‡µðŸ‡ª Peru",
    PH: "ðŸ‡µðŸ‡­ Philippines",
    PL: "ðŸ‡µðŸ‡± Poland",
    PT: "ðŸ‡µðŸ‡¹ Portugal",
    QA: "ðŸ‡¶ðŸ‡¦ Qatar",
    RO: "ðŸ‡·ðŸ‡´ Romania",
    RU: "ðŸ‡·ðŸ‡º Russia",
    RW: "ðŸ‡·ðŸ‡¼ Rwanda",
    KN: "ðŸ‡°ðŸ‡³ Saint Kitts and Nevis",
    LC: "ðŸ‡±ðŸ‡¨ Saint Lucia",
    VC: "ðŸ‡»ðŸ‡¨ Saint Vincent and the Grenadines",
    WS: "ðŸ‡¼ðŸ‡¸ Samoa",
    SM: "ðŸ‡¸ðŸ‡² San Marino",
    ST: "ðŸ‡¸ðŸ‡¹ Sao Tome and Principe",
    SA: "ðŸ‡¸ðŸ‡¦ Saudi Arabia",
    SN: "ðŸ‡¸ðŸ‡³ Senegal",
    RS: "ðŸ‡·ðŸ‡¸ Serbia",
    SC: "ðŸ‡¸ðŸ‡¨ Seychelles",
    SL: "ðŸ‡¸ðŸ‡± Sierra Leone",
    SG: "ðŸ‡¸ðŸ‡¬ Singapore",
    SK: "ðŸ‡¸ðŸ‡° Slovakia",
    SI: "ðŸ‡¸ðŸ‡® Slovenia",
    SB: "ðŸ‡¸ðŸ‡§ Solomon Islands",
    SO: "ðŸ‡¸ðŸ‡´ Somalia",
    ZA: "ðŸ‡¿ðŸ‡¦ South Africa",
    SS: "ðŸ‡¸ðŸ‡¸ South Sudan",
    ES: "ðŸ‡ªðŸ‡¸ Spain",
    LK: "ðŸ‡±ðŸ‡° Sri Lanka",
    SD: "ðŸ‡¸ðŸ‡© Sudan",
    SR: "ðŸ‡¸ðŸ‡· Suriname",
    SE: "ðŸ‡¸ðŸ‡ª Sweden",
    CH: "ðŸ‡¨ðŸ‡­ Switzerland",
    SY: "ðŸ‡¸ðŸ‡¾ Syria",
    TW: "ðŸ‡¹ðŸ‡¼ Taiwan",
    TJ: "ðŸ‡¹ðŸ‡¯ Tajikistan",
    TZ: "ðŸ‡¹ðŸ‡¿ Tanzania",
    TH: "ðŸ‡¹ðŸ‡­ Thailand",
    TL: "ðŸ‡¹ðŸ‡± Timor-Leste",
    TG: "ðŸ‡¹ðŸ‡¬ Togo",
    TO: "ðŸ‡¹ðŸ‡´ Tonga",
    TT: "ðŸ‡¹ðŸ‡¹ Trinidad and Tobago",
    TN: "ðŸ‡¹ðŸ‡³ Tunisia",
    TR: "ðŸ‡¹ðŸ‡· Turkey",
    TM: "ðŸ‡¹ðŸ‡² Turkmenistan",
    TV: "ðŸ‡¹ðŸ‡» Tuvalu",
    UG: "ðŸ‡ºðŸ‡¬ Uganda",
    UA: "ðŸ‡ºðŸ‡¦ Ukraine",
    AE: "ðŸ‡¦ðŸ‡ª United Arab Emirates",
    GB: "ðŸ‡¬ðŸ‡§ United Kingdom",
    US: "ðŸ‡ºðŸ‡¸ United States",
    UY: "ðŸ‡ºðŸ‡¾ Uruguay",
    UZ: "ðŸ‡ºðŸ‡¿ Uzbekistan",
    VU: "ðŸ‡»ðŸ‡º Vanuatu",
    VA: "ðŸ‡»ðŸ‡¦ Vatican City",
    VE: "ðŸ‡»ðŸ‡ª Venezuela",
    VN: "ðŸ‡»ðŸ‡³ Vietnam",
    YE: "ðŸ‡¾ðŸ‡ª Yemen",
    ZM: "ðŸ‡¿ðŸ‡² Zambia",
    ZW: "ðŸ‡¿ðŸ‡¼ Zimbabwe"
  }.freeze

  def display_user_name(user)
    if user.profile.present?
      [ user.profile.first_name, user.profile.middle_name, user.profile.last_name ].compact.join(" ")
    else
      "Profile not set"
    end
  end

  def flag_emoji_for(country_code)
    return '' if country_code.blank?

    # Convert country code to uppercase
    country_code = country_code.upcase

    # Country code should be 2 characters
    return '' if country_code.length != 2

    # Convert country code characters to regional indicator symbols
    # Each letter is converted to an emoji regional indicator symbol (A-Z)
    # The Unicode for these symbols starts at 0x1F1E6 for "A"
    country_code.codepoints.map { |c| (c - 65 + 0x1F1E6).chr(Encoding::UTF_8) }.join
  end

  def timezone_options
    ActiveSupport::TimeZone.all
      .sort_by { |tz| [ tz.utc_offset, tz.name ] }
      .map do |tz|
        name = tz.name.split(" - ").first.gsub(" (US & Canada)", "")
        [ "(#{tz.formatted_offset}) #{name}", tz.tzinfo.identifier ]
      end
  end

  def country_options
    COUNTRY_MAPPING.keys.map { |key| [ COUNTRY_MAPPING[key], key ] }
  end

  def detect_timezone_from_ip(ip_address)
    return 'UTC' if ip_address.blank?

    begin
      # Try to get timezone from IP using geocoder
      result = Geocoder.search(ip_address).first
      if result && result.data['timezone'].present?
        return result.data['timezone']
      end
    rescue => e
      Rails.logger.error "Error detecting timezone from IP: #{e.message}"
    end

    # Default to UTC if detection fails
    'UTC'
  end

  def detect_country_from_ip(ip_address)
    return nil if ip_address.blank?

    begin
      # Try to get country from IP using geocoder
      result = Geocoder.search(ip_address).first
      if result && result.country_code.present?
        return result.country_code.upcase
      end
    rescue => e
      Rails.logger.error "Error detecting country from IP: #{e.message}"
    end

    # Return nil if detection fails
    nil
  end
end
